var search_data = {"index":{"searchIndex":["listen","adapter","bsd","base","config","darwin","linux","polling","windows","backend","cli","change","config","directory","event","config","loop","error","notstarted","processor","stopped","queue","config","fsm","classmethods","state","file","forwarder","internals","threadpool","listener","config","logger","options","queueoptimizer","config","record","entry","symlinkdetector","error","silencer","controller","rubydep","<<()","_async_changes()","_auto_hash()","_calculate_add_remove_difference()","_change()","_change()","_change()","_change()","_check_stopped()","_children()","_configure()","_configure()","_configure()","_configure()","_configure()","_deadline()","_detect_possible_editor_save()","_dir_event?()","_entries()","_event_path()","_fail()","_fast_build_dir()","_fast_try_file()","_fast_unset_path()","_fast_update_file()","_find()","_flush_wakeup_reasons()","_init_ignores()","_join()","_log()","_log()","_log()","_log_exception()","_logical_action_for()","_nice_error()","_process_changes()","_process_event()","_process_event()","_process_event()","_process_event()","_process_event()","_queue_change()","_reconfigure_silencer()","_reinterpret_related_changes()","_remember_time_of_first_unprocessed_event()","_reset_no_unprocessed_events()","_run()","_run()","_run()","_run()","_run()","_run_worker()","_run_workers_in_background()","_safe_relative_from_cwd()","_skip_event?()","_sleep()","_sleep()","_squash_changes()","_stop()","_stop()","_timed()","_timestamp()","_to_array()","_usable_adapter_class()","_wait_for_changes()","_wait_until_events()","_wait_until_events_calm_down()","_wait_until_no_longer_paused()","_wait_until_resumed()","_wakeup()","_warn_polling_fallback()","_watch_file()","_watch_for_new_file()","adapter_instance_options()","adapter_select_options()","add()","add_dir()","append_ignores()","build()","call()","call()","callable?()","change()","children()","configure()","configure()","current_state()","current_state_name()","debug()","default_state()","default_state()","dir_entries()","exist?()","file_data()","ignore()","ignore!()","inaccurate_mac_time?()","included()","invalidate()","logger()","logger=()","loop_for()","meta()","method_missing()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","only()","optimize_changes()","pause()","pause()","paused?()","paused?()","paused?()","processing?()","processing?()","queue()","real_path()","record_dir_key()","relative?()","relative?()","replace_with_bang_ignores()","replace_with_only()","resume()","scan()","select()","setup()","setup_default_logger_if_unset()","silenced?()","silenced?()","silenced?()","sleep()","smoosh_changes()","start()","start()","start()","start()","started?()","state()","states()","states()","stop()","stop()","stop()","stop()","stopped?()","stopped?()","sys_path()","teardown()","timestamp()","to()","transition()","transition!()","transition_with_callbacks!()","unset_path()","update_file()","usable?()","usable?()","usable?()","usable?()","valid_transition?()","validate_and_sanitize_new_state()","verify_unwatched!()","wakeup_on_event()"],"longSearchIndex":["listen","listen::adapter","listen::adapter::bsd","listen::adapter::base","listen::adapter::config","listen::adapter::darwin","listen::adapter::linux","listen::adapter::polling","listen::adapter::windows","listen::backend","listen::cli","listen::change","listen::change::config","listen::directory","listen::event","listen::event::config","listen::event::loop","listen::event::loop::error","listen::event::loop::error::notstarted","listen::event::processor","listen::event::processor::stopped","listen::event::queue","listen::event::queue::config","listen::fsm","listen::fsm::classmethods","listen::fsm::state","listen::file","listen::forwarder","listen::internals","listen::internals::threadpool","listen::listener","listen::listener::config","listen::logger","listen::options","listen::queueoptimizer","listen::queueoptimizer::config","listen::record","listen::record::entry","listen::record::symlinkdetector","listen::record::symlinkdetector::error","listen::silencer","listen::silencer::controller","rubydep","listen::event::queue#<<()","listen::directory::_async_changes()","listen::record#_auto_hash()","listen::queueoptimizer#_calculate_add_remove_difference()","listen::adapter::bsd#_change()","listen::adapter::linux#_change()","listen::adapter::windows#_change()","listen::directory::_change()","listen::event::processor#_check_stopped()","listen::directory::_children()","listen::adapter::bsd#_configure()","listen::adapter::darwin#_configure()","listen::adapter::linux#_configure()","listen::adapter::polling#_configure()","listen::adapter::windows#_configure()","listen::event::processor#_deadline()","listen::queueoptimizer#_detect_possible_editor_save()","listen::adapter::linux#_dir_event?()","listen::record::entry#_entries()","listen::adapter::bsd#_event_path()","listen::record::symlinkdetector#_fail()","listen::record#_fast_build_dir()","listen::record#_fast_try_file()","listen::record#_fast_unset_path()","listen::record#_fast_update_file()","listen::adapter::bsd#_find()","listen::event::processor#_flush_wakeup_reasons()","listen::silencer#_init_ignores()","listen::record::entry#_join()","listen::adapter::_log()","listen::adapter::base#_log()","listen::adapter::base::_log()","listen::adapter::base#_log_exception()","listen::queueoptimizer#_logical_action_for()","listen::event::loop#_nice_error()","listen::event::processor#_process_changes()","listen::adapter::bsd#_process_event()","listen::adapter::darwin#_process_event()","listen::adapter::linux#_process_event()","listen::adapter::polling#_process_event()","listen::adapter::windows#_process_event()","listen::adapter::base#_queue_change()","listen::silencer::controller#_reconfigure_silencer()","listen::queueoptimizer#_reinterpret_related_changes()","listen::event::processor#_remember_time_of_first_unprocessed_event()","listen::event::processor#_reset_no_unprocessed_events()","listen::adapter::bsd#_run()","listen::adapter::darwin#_run()","listen::adapter::linux#_run()","listen::adapter::polling#_run()","listen::adapter::windows#_run()","listen::adapter::darwin#_run_worker()","listen::adapter::darwin#_run_workers_in_background()","listen::event::queue#_safe_relative_from_cwd()","listen::adapter::linux#_skip_event?()","listen::event::loop#_sleep()","listen::event::processor#_sleep()","listen::queueoptimizer#_squash_changes()","listen::adapter::base#_stop()","listen::adapter::linux#_stop()","listen::adapter::base#_timed()","listen::event::processor#_timestamp()","listen::adapter::darwin#_to_array()","listen::adapter::_usable_adapter_class()","listen::event::loop#_wait_for_changes()","listen::event::processor#_wait_until_events()","listen::event::processor#_wait_until_events_calm_down()","listen::event::processor#_wait_until_no_longer_paused()","listen::event::loop#_wait_until_resumed()","listen::event::loop#_wakeup()","listen::adapter::_warn_polling_fallback()","listen::adapter::bsd#_watch_file()","listen::adapter::bsd#_watch_for_new_file()","listen::listener::config#adapter_instance_options()","listen::listener::config#adapter_select_options()","listen::internals::threadpool::add()","listen::record#add_dir()","listen::silencer::controller#append_ignores()","listen::record#build()","listen::event::config#call()","listen::fsm::state#call()","listen::event::config#callable?()","listen::file::change()","listen::record::entry#children()","listen::adapter::base#configure()","listen::silencer#configure()","listen::fsm#current_state()","listen::fsm#current_state_name()","listen::queueoptimizer::config#debug()","listen::fsm#default_state()","listen::fsm::classmethods#default_state()","listen::record#dir_entries()","listen::queueoptimizer::config#exist?()","listen::record#file_data()","listen::listener#ignore()","listen::listener#ignore!()","listen::file::inaccurate_mac_time?()","listen::fsm::included()","listen::change#invalidate()","listen::logger()","listen::logger=()","listen::event::processor#loop_for()","listen::record::entry#meta()","listen::options#method_missing()","listen::adapter::base::new()","listen::adapter::config::new()","listen::backend::new()","listen::change::new()","listen::change::config::new()","listen::event::config::new()","listen::event::loop::new()","listen::event::processor::new()","listen::event::queue::new()","listen::event::queue::config::new()","listen::fsm::new()","listen::fsm::state::new()","listen::forwarder::new()","listen::listener::new()","listen::listener::config::new()","listen::options::new()","listen::queueoptimizer::new()","listen::queueoptimizer::config::new()","listen::record::new()","listen::record::entry::new()","listen::record::symlinkdetector::new()","listen::silencer::new()","listen::silencer::controller::new()","listen::listener#only()","listen::event::config#optimize_changes()","listen::event::loop#pause()","listen::listener#pause()","listen::event::config#paused?()","listen::event::loop#paused?()","listen::listener#paused?()","listen::event::loop#processing?()","listen::listener#processing?()","listen::change::config#queue()","listen::record::entry#real_path()","listen::record::entry#record_dir_key()","listen::event::queue::config#relative?()","listen::listener::config#relative?()","listen::silencer::controller#replace_with_bang_ignores()","listen::silencer::controller#replace_with_only()","listen::event::loop#resume()","listen::directory::scan()","listen::adapter::select()","listen::event::loop#setup()","listen::setup_default_logger_if_unset()","listen::change::config#silenced?()","listen::queueoptimizer::config#silenced?()","listen::silencer#silenced?()","listen::event::config#sleep()","listen::queueoptimizer#smoosh_changes()","listen::adapter::base#start()","listen::cli#start()","listen::forwarder#start()","listen::listener#start()","listen::adapter::base#started?()","listen::fsm::classmethods#state()","listen::fsm#states()","listen::fsm::classmethods#states()","listen::stop()","listen::adapter::base#stop()","listen::internals::threadpool::stop()","listen::listener#stop()","listen::event::config#stopped?()","listen::event::loop#stopped?()","listen::record::entry#sys_path()","listen::event::loop#teardown()","listen::event::config#timestamp()","listen::to()","listen::fsm#transition()","listen::fsm#transition!()","listen::fsm#transition_with_callbacks!()","listen::record#unset_path()","listen::record#update_file()","listen::adapter::bsd::usable?()","listen::adapter::base::usable?()","listen::adapter::darwin::usable?()","listen::adapter::windows::usable?()","listen::fsm::state#valid_transition?()","listen::fsm#validate_and_sanitize_new_state()","listen::record::symlinkdetector#verify_unwatched!()","listen::event::loop#wakeup_on_event()"],"info":[["Listen","","Listen.html","","<p>Listener implementation for BSD&#39;s `kqueue`. @see\nwww.freebsd.org/cgi/man.cgi?query=kqueue @see\ngithub.com/mat813/rb-kqueue/blob/master/lib/rb-kqueue/queue.rb …\n"],["Listen::Adapter","","Listen/Adapter.html","",""],["Listen::Adapter::BSD","","Listen/Adapter/BSD.html","",""],["Listen::Adapter::Base","","Listen/Adapter/Base.html","",""],["Listen::Adapter::Config","","Listen/Adapter/Config.html","",""],["Listen::Adapter::Darwin","","Listen/Adapter/Darwin.html","","<p>Adapter implementation for Mac OS X `FSEvents`.\n"],["Listen::Adapter::Linux","","Listen/Adapter/Linux.html","","<p>@see github.com/nex3/rb-inotify\n"],["Listen::Adapter::Polling","","Listen/Adapter/Polling.html","","<p>Polling Adapter that works cross-platform and has no dependencies. This is\nthe adapter that uses the …\n"],["Listen::Adapter::Windows","","Listen/Adapter/Windows.html","","<p>Adapter implementation for Windows `wdm`.\n"],["Listen::Backend","","Listen/Backend.html","",""],["Listen::CLI","","Listen/CLI.html","",""],["Listen::Change","","Listen/Change.html","","<p>TODO: rename to Snapshot\n"],["Listen::Change::Config","","Listen/Change/Config.html","","<p>TODO: test this class for coverage\n"],["Listen::Directory","","Listen/Directory.html","","<p>TODO: refactor (turn it into a normal object, cache the stat, etc)\n"],["Listen::Event","","Listen/Event.html","",""],["Listen::Event::Config","","Listen/Event/Config.html","",""],["Listen::Event::Loop","","Listen/Event/Loop.html","",""],["Listen::Event::Loop::Error","","Listen/Event/Loop/Error.html","",""],["Listen::Event::Loop::Error::NotStarted","","Listen/Event/Loop/Error/NotStarted.html","",""],["Listen::Event::Processor","","Listen/Event/Processor.html","",""],["Listen::Event::Processor::Stopped","","Listen/Event/Processor/Stopped.html","",""],["Listen::Event::Queue","","Listen/Event/Queue.html","",""],["Listen::Event::Queue::Config","","Listen/Event/Queue/Config.html","",""],["Listen::FSM","","Listen/FSM.html","",""],["Listen::FSM::ClassMethods","","Listen/FSM/ClassMethods.html","",""],["Listen::FSM::State","","Listen/FSM/State.html","",""],["Listen::File","","Listen/File.html","",""],["Listen::Forwarder","","Listen/Forwarder.html","",""],["Listen::Internals","","Listen/Internals.html","","<p>@private api\n"],["Listen::Internals::ThreadPool","","Listen/Internals/ThreadPool.html","",""],["Listen::Listener","","Listen/Listener.html","",""],["Listen::Listener::Config","","Listen/Listener/Config.html","",""],["Listen::Logger","","Listen/Logger.html","",""],["Listen::Options","","Listen/Options.html","",""],["Listen::QueueOptimizer","","Listen/QueueOptimizer.html","",""],["Listen::QueueOptimizer::Config","","Listen/QueueOptimizer/Config.html","",""],["Listen::Record","","Listen/Record.html","","<p>@private api\n<p>@private api\n"],["Listen::Record::Entry","","Listen/Record/Entry.html","","<p>Represents a directory entry (dir or file)\n"],["Listen::Record::SymlinkDetector","","Listen/Record/SymlinkDetector.html","",""],["Listen::Record::SymlinkDetector::Error","","Listen/Record/SymlinkDetector/Error.html","",""],["Listen::Silencer","","Listen/Silencer.html","",""],["Listen::Silencer::Controller","","Listen/Silencer/Controller.html","",""],["RubyDep","","RubyDep.html","",""],["<<","Listen::Event::Queue","Listen/Event/Queue.html#method-i-3C-3C","(args)",""],["_async_changes","Listen::Directory","Listen/Directory.html#method-c-_async_changes","(snapshot, path, previous, options)",""],["_auto_hash","Listen::Record","Listen/Record.html#method-i-_auto_hash","()",""],["_calculate_add_remove_difference","Listen::QueueOptimizer","Listen/QueueOptimizer.html#method-i-_calculate_add_remove_difference","(actions, path, default_if_exists)",""],["_change","Listen::Adapter::BSD","Listen/Adapter/BSD.html#method-i-_change","(event_flags)",""],["_change","Listen::Adapter::Linux","Listen/Adapter/Linux.html#method-i-_change","(event_flags)",""],["_change","Listen::Adapter::Windows","Listen/Adapter/Windows.html#method-i-_change","(type)",""],["_change","Listen::Directory","Listen/Directory.html#method-c-_change","(snapshot, type, path, options)",""],["_check_stopped","Listen::Event::Processor","Listen/Event/Processor.html#method-i-_check_stopped","()",""],["_children","Listen::Directory","Listen/Directory.html#method-c-_children","(path)",""],["_configure","Listen::Adapter::BSD","Listen/Adapter/BSD.html#method-i-_configure","(directory, &callback)",""],["_configure","Listen::Adapter::Darwin","Listen/Adapter/Darwin.html#method-i-_configure","(dir, &callback)","<p>NOTE: each directory gets a DIFFERENT callback!\n"],["_configure","Listen::Adapter::Linux","Listen/Adapter/Linux.html#method-i-_configure","(directory, &callback)",""],["_configure","Listen::Adapter::Polling","Listen/Adapter/Polling.html#method-i-_configure","(_, &callback)",""],["_configure","Listen::Adapter::Windows","Listen/Adapter/Windows.html#method-i-_configure","(dir)",""],["_deadline","Listen::Event::Processor","Listen/Event/Processor.html#method-i-_deadline","()",""],["_detect_possible_editor_save","Listen::QueueOptimizer","Listen/QueueOptimizer.html#method-i-_detect_possible_editor_save","(changes)",""],["_dir_event?","Listen::Adapter::Linux","Listen/Adapter/Linux.html#method-i-_dir_event-3F","(event)",""],["_entries","Listen::Record::Entry","Listen/Record/Entry.html#method-i-_entries","(dir)",""],["_event_path","Listen::Adapter::BSD","Listen/Adapter/BSD.html#method-i-_event_path","(event)",""],["_fail","Listen::Record::SymlinkDetector","Listen/Record/SymlinkDetector.html#method-i-_fail","(symlinked, real_path)",""],["_fast_build_dir","Listen::Record","Listen/Record.html#method-i-_fast_build_dir","(remaining, symlink_detector)",""],["_fast_try_file","Listen::Record","Listen/Record.html#method-i-_fast_try_file","(entry)",""],["_fast_unset_path","Listen::Record","Listen/Record.html#method-i-_fast_unset_path","(dirname, basename)",""],["_fast_update_file","Listen::Record","Listen/Record.html#method-i-_fast_update_file","(dirname, basename, data)",""],["_find","Listen::Adapter::BSD","Listen/Adapter/BSD.html#method-i-_find","(*paths, &block)","<p>Quick rubocop workaround\n"],["_flush_wakeup_reasons","Listen::Event::Processor","Listen/Event/Processor.html#method-i-_flush_wakeup_reasons","()",""],["_init_ignores","Listen::Silencer","Listen/Silencer.html#method-i-_init_ignores","(ignores, overrides)",""],["_join","Listen::Record::Entry","Listen/Record/Entry.html#method-i-_join","()",""],["_log","Listen::Adapter","Listen/Adapter.html#method-c-_log","(type, message)",""],["_log","Listen::Adapter::Base","Listen/Adapter/Base.html#method-i-_log","(*args, &block)",""],["_log","Listen::Adapter::Base","Listen/Adapter/Base.html#method-c-_log","(*args, &block)",""],["_log_exception","Listen::Adapter::Base","Listen/Adapter/Base.html#method-i-_log_exception","(msg, caller_stack)",""],["_logical_action_for","Listen::QueueOptimizer","Listen/QueueOptimizer.html#method-i-_logical_action_for","(path, actions)",""],["_nice_error","Listen::Event::Loop","Listen/Event/Loop.html#method-i-_nice_error","(ex)",""],["_process_changes","Listen::Event::Processor","Listen/Event/Processor.html#method-i-_process_changes","()","<p>for easier testing without sleep loop\n"],["_process_event","Listen::Adapter::BSD","Listen/Adapter/BSD.html#method-i-_process_event","(dir, event)",""],["_process_event","Listen::Adapter::Darwin","Listen/Adapter/Darwin.html#method-i-_process_event","(dir, event)",""],["_process_event","Listen::Adapter::Linux","Listen/Adapter/Linux.html#method-i-_process_event","(dir, event)",""],["_process_event","Listen::Adapter::Polling","Listen/Adapter/Polling.html#method-i-_process_event","(dir, _)",""],["_process_event","Listen::Adapter::Windows","Listen/Adapter/Windows.html#method-i-_process_event","(dir, event)",""],["_queue_change","Listen::Adapter::Base","Listen/Adapter/Base.html#method-i-_queue_change","(type, dir, rel_path, options)","<p>TODO: allow backend adapters to pass specific invalidation objects e.g.\nDarwin -&gt; DirRescan, INotify …\n"],["_reconfigure_silencer","Listen::Silencer::Controller","Listen/Silencer/Controller.html#method-i-_reconfigure_silencer","(extra_options)",""],["_reinterpret_related_changes","Listen::QueueOptimizer","Listen/QueueOptimizer.html#method-i-_reinterpret_related_changes","(cookies)","<p>remove extraneous rb-inotify events, keeping them only if it&#39;s a\npossible editor rename() call (e.g. …\n"],["_remember_time_of_first_unprocessed_event","Listen::Event::Processor","Listen/Event/Processor.html#method-i-_remember_time_of_first_unprocessed_event","()",""],["_reset_no_unprocessed_events","Listen::Event::Processor","Listen/Event/Processor.html#method-i-_reset_no_unprocessed_events","()",""],["_run","Listen::Adapter::BSD","Listen/Adapter/BSD.html#method-i-_run","()",""],["_run","Listen::Adapter::Darwin","Listen/Adapter/Darwin.html#method-i-_run","()",""],["_run","Listen::Adapter::Linux","Listen/Adapter/Linux.html#method-i-_run","()",""],["_run","Listen::Adapter::Polling","Listen/Adapter/Polling.html#method-i-_run","()",""],["_run","Listen::Adapter::Windows","Listen/Adapter/Windows.html#method-i-_run","()",""],["_run_worker","Listen::Adapter::Darwin","Listen/Adapter/Darwin.html#method-i-_run_worker","(worker)",""],["_run_workers_in_background","Listen::Adapter::Darwin","Listen/Adapter/Darwin.html#method-i-_run_workers_in_background","(workers)",""],["_safe_relative_from_cwd","Listen::Event::Queue","Listen/Event/Queue.html#method-i-_safe_relative_from_cwd","(dir)",""],["_skip_event?","Listen::Adapter::Linux","Listen/Adapter/Linux.html#method-i-_skip_event-3F","(event)",""],["_sleep","Listen::Event::Loop","Listen/Event/Loop.html#method-i-_sleep","(*args)",""],["_sleep","Listen::Event::Processor","Listen/Event/Processor.html#method-i-_sleep","(_local_reason, *args)",""],["_squash_changes","Listen::QueueOptimizer","Listen/QueueOptimizer.html#method-i-_squash_changes","(changes)","<p>groups changes into the expected structure expected by clients\n"],["_stop","Listen::Adapter::Base","Listen/Adapter/Base.html#method-i-_stop","()",""],["_stop","Listen::Adapter::Linux","Listen/Adapter/Linux.html#method-i-_stop","()",""],["_timed","Listen::Adapter::Base","Listen/Adapter/Base.html#method-i-_timed","(title)",""],["_timestamp","Listen::Event::Processor","Listen/Event/Processor.html#method-i-_timestamp","()",""],["_to_array","Listen::Adapter::Darwin","Listen/Adapter/Darwin.html#method-i-_to_array","(queue)",""],["_usable_adapter_class","Listen::Adapter","Listen/Adapter.html#method-c-_usable_adapter_class","()",""],["_wait_for_changes","Listen::Event::Loop","Listen/Event/Loop.html#method-i-_wait_for_changes","(ready_queue, config)",""],["_wait_until_events","Listen::Event::Processor","Listen/Event/Processor.html#method-i-_wait_until_events","()",""],["_wait_until_events_calm_down","Listen::Event::Processor","Listen/Event/Processor.html#method-i-_wait_until_events_calm_down","()",""],["_wait_until_no_longer_paused","Listen::Event::Processor","Listen/Event/Processor.html#method-i-_wait_until_no_longer_paused","()",""],["_wait_until_resumed","Listen::Event::Loop","Listen/Event/Loop.html#method-i-_wait_until_resumed","(ready_queue)",""],["_wakeup","Listen::Event::Loop","Listen/Event/Loop.html#method-i-_wakeup","(reason)",""],["_warn_polling_fallback","Listen::Adapter","Listen/Adapter.html#method-c-_warn_polling_fallback","(options)",""],["_watch_file","Listen::Adapter::BSD","Listen/Adapter/BSD.html#method-i-_watch_file","(path, queue)",""],["_watch_for_new_file","Listen::Adapter::BSD","Listen/Adapter/BSD.html#method-i-_watch_for_new_file","(event)",""],["adapter_instance_options","Listen::Listener::Config","Listen/Listener/Config.html#method-i-adapter_instance_options","(klass)",""],["adapter_select_options","Listen::Listener::Config","Listen/Listener/Config.html#method-i-adapter_select_options","()",""],["add","Listen::Internals::ThreadPool","Listen/Internals/ThreadPool.html#method-c-add","(&block)",""],["add_dir","Listen::Record","Listen/Record.html#method-i-add_dir","(rel_path)",""],["append_ignores","Listen::Silencer::Controller","Listen/Silencer/Controller.html#method-i-append_ignores","(*regexps)",""],["build","Listen::Record","Listen/Record.html#method-i-build","()",""],["call","Listen::Event::Config","Listen/Event/Config.html#method-i-call","(*args)",""],["call","Listen::FSM::State","Listen/FSM/State.html#method-i-call","(obj)",""],["callable?","Listen::Event::Config","Listen/Event/Config.html#method-i-callable-3F","()",""],["change","Listen::File","Listen/File.html#method-c-change","(record, rel_path)",""],["children","Listen::Record::Entry","Listen/Record/Entry.html#method-i-children","()",""],["configure","Listen::Adapter::Base","Listen/Adapter/Base.html#method-i-configure","()","<p>TODO: it&#39;s a separate method as a temporary workaround for tests\n"],["configure","Listen::Silencer","Listen/Silencer.html#method-i-configure","(options)",""],["current_state","Listen::FSM","Listen/FSM.html#method-i-current_state","()",""],["current_state_name","Listen::FSM","Listen/FSM.html#method-i-current_state_name","()",""],["debug","Listen::QueueOptimizer::Config","Listen/QueueOptimizer/Config.html#method-i-debug","(*args, &block)",""],["default_state","Listen::FSM","Listen/FSM.html#method-i-default_state","()",""],["default_state","Listen::FSM::ClassMethods","Listen/FSM/ClassMethods.html#method-i-default_state","(new_default = nil)","<p>Obtain or set the default state Passing a state name sets the default state\n"],["dir_entries","Listen::Record","Listen/Record.html#method-i-dir_entries","(rel_path)",""],["exist?","Listen::QueueOptimizer::Config","Listen/QueueOptimizer/Config.html#method-i-exist-3F","(path)",""],["file_data","Listen::Record","Listen/Record.html#method-i-file_data","(rel_path)",""],["ignore","Listen::Listener","Listen/Listener.html#method-i-ignore","(regexps)",""],["ignore!","Listen::Listener","Listen/Listener.html#method-i-ignore-21","(regexps)",""],["inaccurate_mac_time?","Listen::File","Listen/File.html#method-c-inaccurate_mac_time-3F","(stat)",""],["included","Listen::FSM","Listen/FSM.html#method-c-included","(klass)","<p>Included hook to extend class methods\n"],["invalidate","Listen::Change","Listen/Change.html#method-i-invalidate","(type, rel_path, options)","<p>Invalidate some part of the snapshot/record (dir, file, subtree, etc.)\n"],["logger","Listen","Listen.html#method-c-logger","()",""],["logger=","Listen","Listen.html#method-c-logger-3D","(logger)",""],["loop_for","Listen::Event::Processor","Listen/Event/Processor.html#method-i-loop_for","(latency)","<p>TODO: implement this properly instead of checking the state at arbitrary\npoints in time\n"],["meta","Listen::Record::Entry","Listen/Record/Entry.html#method-i-meta","()",""],["method_missing","Listen::Options","Listen/Options.html#method-i-method_missing","(name, *_)",""],["new","Listen::Adapter::Base","Listen/Adapter/Base.html#method-c-new","(config)",""],["new","Listen::Adapter::Config","Listen/Adapter/Config.html#method-c-new","(directories, queue, silencer, adapter_options)",""],["new","Listen::Backend","Listen/Backend.html#method-c-new","(directories, queue, silencer, config)",""],["new","Listen::Change","Listen/Change.html#method-c-new","(config, record)",""],["new","Listen::Change::Config","Listen/Change/Config.html#method-c-new","(queue, silencer)",""],["new","Listen::Event::Config","Listen/Event/Config.html#method-c-new","( listener, event_queue, queue_optimizer, wait_for_delay, &block)",""],["new","Listen::Event::Loop","Listen/Event/Loop.html#method-c-new","(config)",""],["new","Listen::Event::Processor","Listen/Event/Processor.html#method-c-new","(config, reasons)",""],["new","Listen::Event::Queue","Listen/Event/Queue.html#method-c-new","(config, &block)",""],["new","Listen::Event::Queue::Config","Listen/Event/Queue/Config.html#method-c-new","(relative)",""],["new","Listen::FSM","Listen/FSM.html#method-c-new","()","<p>Be kind and call super if you must redefine initialize\n"],["new","Listen::FSM::State","Listen/FSM/State.html#method-c-new","(name, transitions = nil, &block)",""],["new","Listen::Forwarder","Listen/Forwarder.html#method-c-new","(options)",""],["new","Listen::Listener","Listen/Listener.html#method-c-new","(*dirs, &block)","<p>Initializes the directories listener.\n<p>@param [String] directory the directories to listen to @param [Hash] …\n"],["new","Listen::Listener::Config","Listen/Listener/Config.html#method-c-new","(opts)",""],["new","Listen::Options","Listen/Options.html#method-c-new","(opts, defaults)",""],["new","Listen::QueueOptimizer","Listen/QueueOptimizer.html#method-c-new","(config)",""],["new","Listen::QueueOptimizer::Config","Listen/QueueOptimizer/Config.html#method-c-new","(adapter_class, silencer)",""],["new","Listen::Record","Listen/Record.html#method-c-new","(directory)",""],["new","Listen::Record::Entry","Listen/Record/Entry.html#method-c-new","(root, relative, name = nil)","<p>file: “/home/me/watched_dir”, “app/models”, “foo.rb” dir,\n“/home/me/watched_dir”, …\n"],["new","Listen::Record::SymlinkDetector","Listen/Record/SymlinkDetector.html#method-c-new","()",""],["new","Listen::Silencer","Listen/Silencer.html#method-c-new","()",""],["new","Listen::Silencer::Controller","Listen/Silencer/Controller.html#method-c-new","(silencer, default_options)",""],["only","Listen::Listener","Listen/Listener.html#method-i-only","(regexps)",""],["optimize_changes","Listen::Event::Config","Listen/Event/Config.html#method-i-optimize_changes","(changes)",""],["pause","Listen::Event::Loop","Listen/Event/Loop.html#method-i-pause","()",""],["pause","Listen::Listener","Listen/Listener.html#method-i-pause","()","<p>Stops invoking callbacks (messages pile up)\n"],["paused?","Listen::Event::Config","Listen/Event/Config.html#method-i-paused-3F","()",""],["paused?","Listen::Event::Loop","Listen/Event/Loop.html#method-i-paused-3F","()",""],["paused?","Listen::Listener","Listen/Listener.html#method-i-paused-3F","()",""],["processing?","Listen::Event::Loop","Listen/Event/Loop.html#method-i-processing-3F","()",""],["processing?","Listen::Listener","Listen/Listener.html#method-i-processing-3F","()","<p>processing means callbacks are called\n"],["queue","Listen::Change::Config","Listen/Change/Config.html#method-i-queue","(*args)",""],["real_path","Listen::Record::Entry","Listen/Record/Entry.html#method-i-real_path","()",""],["record_dir_key","Listen::Record::Entry","Listen/Record/Entry.html#method-i-record_dir_key","()","<p>record hash is e.g. if @record[“project/app/models”] if\n@record[“project/app”] record_dir_key …\n"],["relative?","Listen::Event::Queue::Config","Listen/Event/Queue/Config.html#method-i-relative-3F","()",""],["relative?","Listen::Listener::Config","Listen/Listener/Config.html#method-i-relative-3F","()",""],["replace_with_bang_ignores","Listen::Silencer::Controller","Listen/Silencer/Controller.html#method-i-replace_with_bang_ignores","(regexps)",""],["replace_with_only","Listen::Silencer::Controller","Listen/Silencer/Controller.html#method-i-replace_with_only","(regexps)",""],["resume","Listen::Event::Loop","Listen/Event/Loop.html#method-i-resume","()",""],["scan","Listen::Directory","Listen/Directory.html#method-c-scan","(snapshot, rel_path, options)",""],["select","Listen::Adapter","Listen/Adapter.html#method-c-select","(options = {})",""],["setup","Listen::Event::Loop","Listen/Event/Loop.html#method-i-setup","()",""],["setup_default_logger_if_unset","Listen","Listen.html#method-c-setup_default_logger_if_unset","()",""],["silenced?","Listen::Change::Config","Listen/Change/Config.html#method-i-silenced-3F","(path, type)",""],["silenced?","Listen::QueueOptimizer::Config","Listen/QueueOptimizer/Config.html#method-i-silenced-3F","(path, type)",""],["silenced?","Listen::Silencer","Listen/Silencer.html#method-i-silenced-3F","(relative_path, type)","<p>TODO: switch type and path places - and verify\n"],["sleep","Listen::Event::Config","Listen/Event/Config.html#method-i-sleep","(*args)",""],["smoosh_changes","Listen::QueueOptimizer","Listen/QueueOptimizer.html#method-i-smoosh_changes","(changes)",""],["start","Listen::Adapter::Base","Listen/Adapter/Base.html#method-i-start","()",""],["start","Listen::CLI","Listen/CLI.html#method-i-start","()",""],["start","Listen::Forwarder","Listen/Forwarder.html#method-i-start","()",""],["start","Listen::Listener","Listen/Listener.html#method-i-start","()","<p>Starts processing events and starts adapters or resumes invoking callbacks\nif paused\n"],["started?","Listen::Adapter::Base","Listen/Adapter/Base.html#method-i-started-3F","()",""],["state","Listen::FSM::ClassMethods","Listen/FSM/ClassMethods.html#method-i-state","(*args, &block)","<p>Declare an FSM state and optionally provide a callback block to fire\nOptions:\n<p>to: a state or array of …\n\n"],["states","Listen::FSM","Listen/FSM.html#method-i-states","()",""],["states","Listen::FSM::ClassMethods","Listen/FSM/ClassMethods.html#method-i-states","()","<p>Obtain the valid states for this FSM\n"],["stop","Listen","Listen.html#method-c-stop","()","<p>This is used by the `listen` binary to handle Ctrl-C\n"],["stop","Listen::Adapter::Base","Listen/Adapter/Base.html#method-i-stop","()",""],["stop","Listen::Internals::ThreadPool","Listen/Internals/ThreadPool.html#method-c-stop","()",""],["stop","Listen::Listener","Listen/Listener.html#method-i-stop","()","<p>Stops both listening for events and processing them\n"],["stopped?","Listen::Event::Config","Listen/Event/Config.html#method-i-stopped-3F","()",""],["stopped?","Listen::Event::Loop","Listen/Event/Loop.html#method-i-stopped-3F","()",""],["sys_path","Listen::Record::Entry","Listen/Record/Entry.html#method-i-sys_path","()",""],["teardown","Listen::Event::Loop","Listen/Event/Loop.html#method-i-teardown","()",""],["timestamp","Listen::Event::Config","Listen/Event/Config.html#method-i-timestamp","()",""],["to","Listen","Listen.html#method-c-to","(*args, &block)","<p>Listens to file system modifications on a either single directory or\nmultiple directories.\n<p>@param (see …\n"],["transition","Listen::FSM","Listen/FSM.html#method-i-transition","(state_name)",""],["transition!","Listen::FSM","Listen/FSM.html#method-i-transition-21","(state_name)","<p>Immediate state transition with no checks, or callbacks. “Dangerous!”\n"],["transition_with_callbacks!","Listen::FSM","Listen/FSM.html#method-i-transition_with_callbacks-21","(state_name)",""],["unset_path","Listen::Record","Listen/Record.html#method-i-unset_path","(rel_path)",""],["update_file","Listen::Record","Listen/Record.html#method-i-update_file","(rel_path, data)",""],["usable?","Listen::Adapter::BSD","Listen/Adapter/BSD.html#method-c-usable-3F","()",""],["usable?","Listen::Adapter::Base","Listen/Adapter/Base.html#method-c-usable-3F","()",""],["usable?","Listen::Adapter::Darwin","Listen/Adapter/Darwin.html#method-c-usable-3F","()",""],["usable?","Listen::Adapter::Windows","Listen/Adapter/Windows.html#method-c-usable-3F","()",""],["valid_transition?","Listen::FSM::State","Listen/FSM/State.html#method-i-valid_transition-3F","(new_state)",""],["validate_and_sanitize_new_state","Listen::FSM","Listen/FSM.html#method-i-validate_and_sanitize_new_state","(state_name)",""],["verify_unwatched!","Listen::Record::SymlinkDetector","Listen/Record/SymlinkDetector.html#method-i-verify_unwatched-21","(entry)",""],["wakeup_on_event","Listen::Event::Loop","Listen/Event/Loop.html#method-i-wakeup_on_event","()",""]]}}